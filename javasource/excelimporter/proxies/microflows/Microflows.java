// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package excelimporter.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the ExcelImporter module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder _DocumentationDummyXSDBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter._DocumentationDummyXSD");
		return builder;
	}

	public static void _DocumentationDummyXSD(IContext context)
	{
		_DocumentationDummyXSDBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder _DocumentationExportParseFlowsBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter._DocumentationExportParseFlows");
		return builder;
	}

	public static void _DocumentationExportParseFlows(IContext context)
	{
		_DocumentationExportParseFlowsBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder _DocumentationImportParseFlowsBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter._DocumentationImportParseFlows");
		return builder;
	}

	public static void _DocumentationImportParseFlows(IContext context)
	{
		_DocumentationImportParseFlowsBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCr_TemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ACr_Template");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void aCr_Template(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		aCr_TemplateBuilder(
				_template
			)
			.execute(context);
	}
	/**
	 * This microflow shows the actions which should be executed when the application is being started.
	 * 
	 * First synchronize all objects using the ModelReflection module. Then validate the excel templats
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aSu_CheckModelAndTemplatesBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ASu_CheckModelAndTemplates");
		return builder;
	}

	/**
	 * This microflow shows the actions which should be executed when the application is being started.
	 * 
	 * First synchronize all objects using the ModelReflection module. Then validate the excel templats
	 */
	public static boolean aSu_CheckModelAndTemplates(IContext context)
	{
		Object result = aSu_CheckModelAndTemplatesBuilder().execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder bCo_ColumnBuilder(
		excelimporter.proxies.Column _pColumn
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.BCo_Column");
		builder = builder.withParam("pColumn", _pColumn);
		return builder;
	}

	public static boolean bCo_Column(
		IContext context,
		excelimporter.proxies.Column _pColumn
	)
	{
		Object result = bCo_ColumnBuilder(
				_pColumn
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder bDe_ColumnBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.BDe_Column");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static boolean bDe_Column(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		Object result = bDe_ColumnBuilder(
				_column
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_Column_SetDefaultObjectBuilder(
		excelimporter.proxies.Column _columns
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_Column_SetDefaultObject");
		builder = builder.withParam("Columns", _columns);
		return builder;
	}

	public static void ch_Column_SetDefaultObject(
		IContext context,
		excelimporter.proxies.Column _columns
	)
	{
		ch_Column_SetDefaultObjectBuilder(
				_columns
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_FindAttributeBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_FindAttribute");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void ch_FindAttribute(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_FindAttributeBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_FindAttribute_ReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_FindAttribute_Reference");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void ch_FindAttribute_Reference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_FindAttribute_ReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_FindMicroflowBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_FindMicroflow");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void ch_FindMicroflow(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_FindMicroflowBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_FindObjectType_ReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_FindObjectType_Reference");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void ch_FindObjectType_Reference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_FindObjectType_ReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_FindReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_FindReference");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void ch_FindReference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_FindReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_SetAttributeBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_SetAttribute");
		builder = builder.withParam("column", _column);
		return builder;
	}

	public static void ch_SetAttribute(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_SetAttributeBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_SetAttribute_ReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_SetAttribute_Reference");
		builder = builder.withParam("column", _column);
		return builder;
	}

	public static void ch_SetAttribute_Reference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_SetAttribute_ReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_SetMicroflowBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_SetMicroflow");
		builder = builder.withParam("column", _column);
		return builder;
	}

	public static void ch_SetMicroflow(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_SetMicroflowBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_SetObjectType_ReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_SetObjectType_Reference");
		builder = builder.withParam("column", _column);
		return builder;
	}

	public static void ch_SetObjectType_Reference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_SetObjectType_ReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_SetReferenceBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_SetReference");
		builder = builder.withParam("column", _column);
		return builder;
	}

	public static void ch_SetReference(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		ch_SetReferenceBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_Template_ChangeObjectTypeBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_Template_ChangeObjectType");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void ch_Template_ChangeObjectType(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		ch_Template_ChangeObjectTypeBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder ch_Template_CheckNrsBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Ch_Template_CheckNrs");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static boolean ch_Template_CheckNrs(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		Object result = ch_Template_CheckNrsBuilder(
				_template
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder cleanupOldRefHandlingBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.CleanupOldRefHandling");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void cleanupOldRefHandling(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		cleanupOldRefHandlingBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder column_SetCorrectRefObjectTypeBuilder(
		mxmodelreflection.proxies.MxObjectReference _reference,
		excelimporter.proxies.Column _column,
		mxmodelreflection.proxies.MxObjectType _startMxObjectType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Column_SetCorrectRefObjectType");
		builder = builder.withParam("Reference", _reference);
		builder = builder.withParam("Column", _column);
		builder = builder.withParam("StartMxObjectType", _startMxObjectType);
		return builder;
	}

	public static void column_SetCorrectRefObjectType(
		IContext context,
		mxmodelreflection.proxies.MxObjectReference _reference,
		excelimporter.proxies.Column _column,
		mxmodelreflection.proxies.MxObjectType _startMxObjectType
	)
	{
		column_SetCorrectRefObjectTypeBuilder(
				_reference,
				_column,
				_startMxObjectType
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder column_SetDetailsBuilder(
		excelimporter.proxies.Column _pColumn
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Column_SetDetails");
		builder = builder.withParam("pColumn", _pColumn);
		return builder;
	}

	public static void column_SetDetails(
		IContext context,
		excelimporter.proxies.Column _pColumn
	)
	{
		column_SetDetailsBuilder(
				_pColumn
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder columnDataSourceToStringBuilder(
		excelimporter.proxies.DataSource _dataSource
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ColumnDataSourceToString");
		builder = builder.withParam("DataSource", _dataSource == null ? null : _dataSource.name());
		return builder;
	}

	public static java.lang.String columnDataSourceToString(
		IContext context,
		excelimporter.proxies.DataSource _dataSource
	)
	{
		Object result = columnDataSourceToStringBuilder(
				_dataSource
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder columnMappingTypeToStringBuilder(
		excelimporter.proxies.MappingType _mappingType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ColumnMappingTypeToString");
		builder = builder.withParam("MappingType", _mappingType == null ? null : _mappingType.name());
		return builder;
	}

	public static java.lang.String columnMappingTypeToString(
		IContext context,
		excelimporter.proxies.MappingType _mappingType
	)
	{
		Object result = columnMappingTypeToStringBuilder(
				_mappingType
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder columnReferenceKeyTypeToStringBuilder(
		excelimporter.proxies.ReferenceKeyType _referenceKeyType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ColumnReferenceKeyTypeToString");
		builder = builder.withParam("ReferenceKeyType", _referenceKeyType == null ? null : _referenceKeyType.name());
		return builder;
	}

	public static java.lang.String columnReferenceKeyTypeToString(
		IContext context,
		excelimporter.proxies.ReferenceKeyType _referenceKeyType
	)
	{
		Object result = columnReferenceKeyTypeToStringBuilder(
				_referenceKeyType
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder columnYesNoToStringBuilder(
		excelimporter.proxies.YesNo _yesNo
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ColumnYesNoToString");
		builder = builder.withParam("YesNo", _yesNo == null ? null : _yesNo.name());
		return builder;
	}

	public static java.lang.String columnYesNoToString(
		IContext context,
		excelimporter.proxies.YesNo _yesNo
	)
	{
		Object result = columnYesNoToStringBuilder(
				_yesNo
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder excelImporterTemplateXSDBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ExcelImporterTemplateXSD");
		return builder;
	}

	public static excelimporter.proxies.Template excelImporterTemplateXSD(IContext context)
	{
		Object result = excelImporterTemplateXSDBuilder().execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder excelTemplate_ExportToXMLBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ExcelTemplate_ExportToXML");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static excelimporter.proxies.XMLDocumentTemplate excelTemplate_ExportToXML(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		Object result = excelTemplate_ExportToXMLBuilder(
				_template
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.XMLDocumentTemplate.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder excelTemplate_ImportFromXmlBuilder(
		excelimporter.proxies.XMLDocumentTemplate _xMLDocumentTemplate
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ExcelTemplate_ImportFromXml");
		builder = builder.withParam("XMLDocumentTemplate", _xMLDocumentTemplate);
		return builder;
	}

	public static void excelTemplate_ImportFromXml(
		IContext context,
		excelimporter.proxies.XMLDocumentTemplate _xMLDocumentTemplate
	)
	{
		excelTemplate_ImportFromXmlBuilder(
				_xMLDocumentTemplate
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder formatIntegerBuilder(
		java.lang.String _unformatted
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.FormatInteger");
		builder = builder.withParam("Unformatted", _unformatted);
		return builder;
	}

	public static java.lang.String formatInteger(
		IContext context,
		java.lang.String _unformatted
	)
	{
		Object result = formatIntegerBuilder(
				_unformatted
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getAddPropertiesBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.GetAddProperties");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static excelimporter.proxies.AdditionalProperties getAddProperties(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		Object result = getAddPropertiesBuilder(
				_template
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.AdditionalProperties.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder getCorrectStringBuilder(
		java.lang.String _textNL,
		java.lang.String _textEN,
		system.proxies.Language _curLanguage
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.GetCorrectString");
		builder = builder.withParam("TextNL", _textNL);
		builder = builder.withParam("TextEN", _textEN);
		builder = builder.withParam("CurLanguage", _curLanguage);
		return builder;
	}

	public static java.lang.String getCorrectString(
		IContext context,
		java.lang.String _textNL,
		java.lang.String _textEN,
		system.proxies.Language _curLanguage
	)
	{
		Object result = getCorrectStringBuilder(
				_textNL,
				_textEN,
				_curLanguage
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_CancelTemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_CancelTemplate");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void iVK_CancelTemplate(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		iVK_CancelTemplateBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_Column_SaveBuilder(
		excelimporter.proxies.Column _column
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_Column_Save");
		builder = builder.withParam("Column", _column);
		return builder;
	}

	public static void iVK_Column_Save(
		IContext context,
		excelimporter.proxies.Column _column
	)
	{
		iVK_Column_SaveBuilder(
				_column
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_ColumnEditBuilder(
		excelimporter.proxies.Column _column,
		excelimporter.proxies.Template _enclosingContext
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_ColumnEdit");
		builder = builder.withParam("Column", _column);
		builder = builder.withParam("EnclosingContext", _enclosingContext);
		return builder;
	}

	public static void iVK_ColumnEdit(
		IContext context,
		excelimporter.proxies.Column _column,
		excelimporter.proxies.Template _enclosingContext
	)
	{
		iVK_ColumnEditBuilder(
				_column,
				_enclosingContext
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_ColumnNewBuilder(
		excelimporter.proxies.Template _enclosingContext
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_ColumnNew");
		builder = builder.withParam("EnclosingContext", _enclosingContext);
		return builder;
	}

	public static void iVK_ColumnNew(
		IContext context,
		excelimporter.proxies.Template _enclosingContext
	)
	{
		iVK_ColumnNewBuilder(
				_enclosingContext
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_DuplicateTemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_DuplicateTemplate");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static excelimporter.proxies.Template iVK_DuplicateTemplate(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		Object result = iVK_DuplicateTemplateBuilder(
				_template
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, (IMendixObject) result);
	}
	/**
	 * Example how you can implement your own excel import file
	 * 
	 * Retrieve a template, this can be  from an association or by the use of a constant or some application settings. How exactly the template is retrieved does not really matter. 
	 * 
	 * Next, if the template is found the import java action should be executed. This java action has three parameters. The first parameter is the retrieved template, the second parameter is the excel file. The third parameter is an optional parameter this parameter can contain an object in case you want to set the reference from all imported objects to the object from the parameter.
	 * 
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_ImportTemplateDocumentBuilder(
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_ImportTemplateDocument");
		builder = builder.withParam("TemplateDocument", _templateDocument);
		return builder;
	}

	/**
	 * Example how you can implement your own excel import file
	 * 
	 * Retrieve a template, this can be  from an association or by the use of a constant or some application settings. How exactly the template is retrieved does not really matter. 
	 * 
	 * Next, if the template is found the import java action should be executed. This java action has three parameters. The first parameter is the retrieved template, the second parameter is the excel file. The third parameter is an optional parameter this parameter can contain an object in case you want to set the reference from all imported objects to the object from the parameter.
	 * 
	 */
	public static void iVK_ImportTemplateDocument(
		IContext context,
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		iVK_ImportTemplateDocumentBuilder(
				_templateDocument
			)
			.execute(context);
	}
	/**
	 * Create an XMLDocumentTemplate object and op the upload form.
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_ImportXML_UploadBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_ImportXML_Upload");
		return builder;
	}

	/**
	 * Create an XMLDocumentTemplate object and op the upload form.
	 */
	public static void iVK_ImportXML_Upload(IContext context)
	{
		iVK_ImportXML_UploadBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_SaveContinue_CreateTemplateFromDocBuilder(
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_SaveContinue_CreateTemplateFromDoc");
		builder = builder.withParam("TemplateDocument", _templateDocument);
		return builder;
	}

	public static void iVK_SaveContinue_CreateTemplateFromDoc(
		IContext context,
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		iVK_SaveContinue_CreateTemplateFromDocBuilder(
				_templateDocument
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_SaveNewTemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_SaveNewTemplate");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void iVK_SaveNewTemplate(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		iVK_SaveNewTemplateBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_SaveNewTemplate_CreateColumnsBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_SaveNewTemplate_CreateColumns");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void iVK_SaveNewTemplate_CreateColumns(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		iVK_SaveNewTemplate_CreateColumnsBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_SaveTemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_SaveTemplate");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static boolean iVK_SaveTemplate(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		Object result = iVK_SaveTemplateBuilder(
				_template
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_Template_ConnectMatchingAttributesBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_Template_ConnectMatchingAttributes");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void iVK_Template_ConnectMatchingAttributes(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		iVK_Template_ConnectMatchingAttributesBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_Template_NewFromFileBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_Template_NewFromFile");
		return builder;
	}

	public static void iVK_Template_NewFromFile(IContext context)
	{
		iVK_Template_NewFromFileBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder iVK_TemplateDoc_CancelBuilder(
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.IVK_TemplateDoc_Cancel");
		builder = builder.withParam("TemplateDocument", _templateDocument);
		return builder;
	}

	public static void iVK_TemplateDoc_Cancel(
		IContext context,
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		iVK_TemplateDoc_CancelBuilder(
				_templateDocument
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mxObjectAttributeTypesEnumToStringBuilder(
		mxmodelreflection.proxies.PrimitiveTypes _attributeTypes
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.MxObjectAttributeTypesEnumToString");
		builder = builder.withParam("AttributeTypes", _attributeTypes == null ? null : _attributeTypes.name());
		return builder;
	}

	public static java.lang.String mxObjectAttributeTypesEnumToString(
		IContext context,
		mxmodelreflection.proxies.PrimitiveTypes _attributeTypes
	)
	{
		Object result = mxObjectAttributeTypesEnumToStringBuilder(
				_attributeTypes
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mxObjectReferenceAssociationOwnerToStringBuilder(
		mxmodelreflection.proxies.AssociationOwner _associationOwnerEnum
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.MxObjectReferenceAssociationOwnerToString");
		builder = builder.withParam("AssociationOwnerEnum", _associationOwnerEnum == null ? null : _associationOwnerEnum.name());
		return builder;
	}

	public static java.lang.String mxObjectReferenceAssociationOwnerToString(
		IContext context,
		mxmodelreflection.proxies.AssociationOwner _associationOwnerEnum
	)
	{
		Object result = mxObjectReferenceAssociationOwnerToStringBuilder(
				_associationOwnerEnum
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mxObjectReferenceReferenceTypeToStringBuilder(
		mxmodelreflection.proxies.ReferenceType _referenceTypeEnum
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.MxObjectReferenceReferenceTypeToString");
		builder = builder.withParam("ReferenceTypeEnum", _referenceTypeEnum == null ? null : _referenceTypeEnum.name());
		return builder;
	}

	public static java.lang.String mxObjectReferenceReferenceTypeToString(
		IContext context,
		mxmodelreflection.proxies.ReferenceType _referenceTypeEnum
	)
	{
		Object result = mxObjectReferenceReferenceTypeToStringBuilder(
				_referenceTypeEnum
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder parseEnumToString_StatisticLevelBuilder(
		excelimporter.proxies.StatisticsLevel _printStatisticsMessages
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ParseEnumToString_StatisticLevel");
		builder = builder.withParam("PrintStatisticsMessages", _printStatisticsMessages == null ? null : _printStatisticsMessages.name());
		return builder;
	}

	public static java.lang.String parseEnumToString_StatisticLevel(
		IContext context,
		excelimporter.proxies.StatisticsLevel _printStatisticsMessages
	)
	{
		Object result = parseEnumToString_StatisticLevelBuilder(
				_printStatisticsMessages
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder parseStringToEnum_StatisticsLevelBuilder(
		java.lang.String _printStatisticsMessages
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ParseStringToEnum_StatisticsLevel");
		builder = builder.withParam("PrintStatisticsMessages", _printStatisticsMessages);
		return builder;
	}

	public static excelimporter.proxies.StatisticsLevel parseStringToEnum_StatisticsLevel(
		IContext context,
		java.lang.String _printStatisticsMessages
	)
	{
		Object result = parseStringToEnum_StatisticsLevelBuilder(
				_printStatisticsMessages
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.StatisticsLevel.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder prepareReferenceHandlingBuilder(
		excelimporter.proxies.Column _pColumn
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.prepareReferenceHandling");
		builder = builder.withParam("pColumn", _pColumn);
		return builder;
	}

	public static void prepareReferenceHandling(
		IContext context,
		excelimporter.proxies.Column _pColumn
	)
	{
		prepareReferenceHandlingBuilder(
				_pColumn
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder referenceHandlingEnumToStringBuilder(
		excelimporter.proxies.ReferenceHandlingEnum _referenceHandlingEnum
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ReferenceHandlingEnumToString");
		builder = builder.withParam("ReferenceHandlingEnum", _referenceHandlingEnum == null ? null : _referenceHandlingEnum.name());
		return builder;
	}

	public static java.lang.String referenceHandlingEnumToString(
		IContext context,
		excelimporter.proxies.ReferenceHandlingEnum _referenceHandlingEnum
	)
	{
		Object result = referenceHandlingEnumToStringBuilder(
				_referenceHandlingEnum
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder setColumnStatusBuilder(
		excelimporter.proxies.Column _column,
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.SetColumnStatus");
		builder = builder.withParam("Column", _column);
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void setColumnStatus(
		IContext context,
		excelimporter.proxies.Column _column,
		excelimporter.proxies.Template _template
	)
	{
		setColumnStatusBuilder(
				_column,
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder setupColumnBuilder(
		excelimporter.proxies.Template _template,
		java.lang.String _attribute,
		java.lang.Long _colNr,
		java.util.List<excelimporter.proxies.Column> _columnList,
		excelimporter.proxies.YesNo _isKey,
		java.lang.String _mFName
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.SetupColumn");
		builder = builder.withParam("Template", _template);
		builder = builder.withParam("Attribute", _attribute);
		builder = builder.withParam("ColNr", _colNr);
		builder = builder.withParam("ColumnList", _columnList);
		builder = builder.withParam("IsKey", _isKey == null ? null : _isKey.name());
		builder = builder.withParam("MFName", _mFName);
		return builder;
	}

	public static void setupColumn(
		IContext context,
		excelimporter.proxies.Template _template,
		java.lang.String _attribute,
		java.lang.Long _colNr,
		java.util.List<excelimporter.proxies.Column> _columnList,
		excelimporter.proxies.YesNo _isKey,
		java.lang.String _mFName
	)
	{
		setupColumnBuilder(
				_template,
				_attribute,
				_colNr,
				_columnList,
				_isKey,
				_mFName
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder setupTemplateBuilder(
		java.lang.String _templateName,
		java.lang.String _importObjectTypeName,
		java.lang.String _parentReferenceName,
		java.lang.Long _dataRowNr,
		excelimporter.proxies.ImportActions _importActions
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.SetupTemplate");
		builder = builder.withParam("TemplateName", _templateName);
		builder = builder.withParam("ImportObjectTypeName", _importObjectTypeName);
		builder = builder.withParam("ParentReferenceName", _parentReferenceName);
		builder = builder.withParam("DataRowNr", _dataRowNr);
		builder = builder.withParam("ImportActions", _importActions == null ? null : _importActions.name());
		return builder;
	}

	public static excelimporter.proxies.Template setupTemplate(
		IContext context,
		java.lang.String _templateName,
		java.lang.String _importObjectTypeName,
		java.lang.String _parentReferenceName,
		java.lang.Long _dataRowNr,
		excelimporter.proxies.ImportActions _importActions
	)
	{
		Object result = setupTemplateBuilder(
				_templateName,
				_importObjectTypeName,
				_parentReferenceName,
				_dataRowNr,
				_importActions
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.Template.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sF_Template_CheckNrsBuilder(
		excelimporter.proxies.Template _template,
		boolean _showWarningPopup
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.SF_Template_CheckNrs");
		builder = builder.withParam("Template", _template);
		builder = builder.withParam("ShowWarningPopup", _showWarningPopup);
		return builder;
	}

	public static boolean sF_Template_CheckNrs(
		IContext context,
		excelimporter.proxies.Template _template,
		boolean _showWarningPopup
	)
	{
		Object result = sF_Template_CheckNrsBuilder(
				_template,
				_showWarningPopup
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToColumnMappingTypeBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToColumnMappingType");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.MappingType stringToColumnMappingType(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToColumnMappingTypeBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.MappingType.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToColumnReferenceKeyTypeBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToColumnReferenceKeyType");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.ReferenceKeyType stringToColumnReferenceKeyType(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToColumnReferenceKeyTypeBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceKeyType.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToColumnYesNoBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToColumnYesNo");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.YesNo stringToColumnYesNo(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToColumnYesNoBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.YesNo.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToDataSourceBuilder(
		java.lang.String _dataSource
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToDataSource");
		builder = builder.withParam("DataSource", _dataSource);
		return builder;
	}

	public static excelimporter.proxies.DataSource stringToDataSource(
		IContext context,
		java.lang.String _dataSource
	)
	{
		Object result = stringToDataSourceBuilder(
				_dataSource
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.DataSource.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToMxObjectAttributeTypesEnumBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToMxObjectAttributeTypesEnum");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static mxmodelreflection.proxies.PrimitiveTypes stringToMxObjectAttributeTypesEnum(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToMxObjectAttributeTypesEnumBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : mxmodelreflection.proxies.PrimitiveTypes.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToMxObjectReferenceAssociationOwnerBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToMxObjectReferenceAssociationOwner");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static mxmodelreflection.proxies.AssociationOwner stringToMxObjectReferenceAssociationOwner(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToMxObjectReferenceAssociationOwnerBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : mxmodelreflection.proxies.AssociationOwner.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToMxObjectReferenceReferenceTypeBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToMxObjectReferenceReferenceType");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static mxmodelreflection.proxies.ReferenceType stringToMxObjectReferenceReferenceType(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToMxObjectReferenceReferenceTypeBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : mxmodelreflection.proxies.ReferenceType.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToReferenceDataHandlingBuilder(
		java.lang.String _dataHandling
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToReferenceDataHandling");
		builder = builder.withParam("DataHandling", _dataHandling);
		return builder;
	}

	public static excelimporter.proxies.ReferenceDataHandling stringToReferenceDataHandling(
		IContext context,
		java.lang.String _dataHandling
	)
	{
		Object result = stringToReferenceDataHandlingBuilder(
				_dataHandling
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceDataHandling.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToReferenceHandlingEnumBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToReferenceHandlingEnum");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.ReferenceHandlingEnum stringToReferenceHandlingEnum(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToReferenceHandlingEnumBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.ReferenceHandlingEnum.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToTemplateImportActionsBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToTemplateImportActions");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.ImportActions stringToTemplateImportActions(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToTemplateImportActionsBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.ImportActions.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToTemplateRemoveIndicatorBuilder(
		java.lang.String _removeUnsyncedObjects
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToTemplateRemoveIndicator");
		builder = builder.withParam("RemoveUnsyncedObjects", _removeUnsyncedObjects);
		return builder;
	}

	public static excelimporter.proxies.RemoveIndicator stringToTemplateRemoveIndicator(
		IContext context,
		java.lang.String _removeUnsyncedObjects
	)
	{
		Object result = stringToTemplateRemoveIndicatorBuilder(
				_removeUnsyncedObjects
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.RemoveIndicator.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder stringToTemplateStatusEnumBuilder(
		java.lang.String _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.StringToTemplateStatusEnum");
		builder = builder.withParam("Input", _input);
		return builder;
	}

	public static excelimporter.proxies.Status stringToTemplateStatusEnum(
		IContext context,
		java.lang.String _input
	)
	{
		Object result = stringToTemplateStatusEnumBuilder(
				_input
			)
			.execute(context);
		return result == null ? null : excelimporter.proxies.Status.valueOf((java.lang.String) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sub_CreateColumnsFromTemplateBuilder(
		excelimporter.proxies.Template _template
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Sub_CreateColumnsFromTemplate");
		builder = builder.withParam("Template", _template);
		return builder;
	}

	public static void sub_CreateColumnsFromTemplate(
		IContext context,
		excelimporter.proxies.Template _template
	)
	{
		sub_CreateColumnsFromTemplateBuilder(
				_template
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder templateImportActionsToStringBuilder(
		excelimporter.proxies.ImportActions _importActions
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.TemplateImportActionsToString");
		builder = builder.withParam("ImportActions", _importActions == null ? null : _importActions.name());
		return builder;
	}

	public static java.lang.String templateImportActionsToString(
		IContext context,
		excelimporter.proxies.ImportActions _importActions
	)
	{
		Object result = templateImportActionsToStringBuilder(
				_importActions
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder templateReferenceDataHandlingEnumToStringBuilder(
		excelimporter.proxies.ReferenceDataHandling _dataHandling
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.TemplateReferenceDataHandlingEnumToString");
		builder = builder.withParam("DataHandling", _dataHandling == null ? null : _dataHandling.name());
		return builder;
	}

	public static java.lang.String templateReferenceDataHandlingEnumToString(
		IContext context,
		excelimporter.proxies.ReferenceDataHandling _dataHandling
	)
	{
		Object result = templateReferenceDataHandlingEnumToStringBuilder(
				_dataHandling
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder templateReferenceHandlingEnumToStringBuilder(
		excelimporter.proxies.ReferenceHandlingEnum _referenceHandling
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.TemplateReferenceHandlingEnumToString");
		builder = builder.withParam("ReferenceHandling", _referenceHandling == null ? null : _referenceHandling.name());
		return builder;
	}

	public static java.lang.String templateReferenceHandlingEnumToString(
		IContext context,
		excelimporter.proxies.ReferenceHandlingEnum _referenceHandling
	)
	{
		Object result = templateReferenceHandlingEnumToStringBuilder(
				_referenceHandling
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder templateRemoveIndicatorToStringBuilder(
		excelimporter.proxies.RemoveIndicator _removeUnsyncedObjects
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.TemplateRemoveIndicatorToString");
		builder = builder.withParam("RemoveUnsyncedObjects", _removeUnsyncedObjects == null ? null : _removeUnsyncedObjects.name());
		return builder;
	}

	public static java.lang.String templateRemoveIndicatorToString(
		IContext context,
		excelimporter.proxies.RemoveIndicator _removeUnsyncedObjects
	)
	{
		Object result = templateRemoveIndicatorToStringBuilder(
				_removeUnsyncedObjects
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder templateStatusEnumToStringBuilder(
		excelimporter.proxies.Status _input
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.TemplateStatusEnumToString");
		builder = builder.withParam("Input", _input == null ? null : _input.name());
		return builder;
	}

	public static java.lang.String templateStatusEnumToString(
		IContext context,
		excelimporter.proxies.Status _input
	)
	{
		Object result = templateStatusEnumToStringBuilder(
				_input
			)
			.execute(context);
		return (java.lang.String) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder validate_TemplateDocumentBuilder(
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.Validate_TemplateDocument");
		builder = builder.withParam("TemplateDocument", _templateDocument);
		return builder;
	}

	public static boolean validate_TemplateDocument(
		IContext context,
		excelimporter.proxies.TemplateDocument _templateDocument
	)
	{
		Object result = validate_TemplateDocumentBuilder(
				_templateDocument
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder validateTemplateBuilder(
		excelimporter.proxies.Template _template,
		boolean _showWarningPopup
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("ExcelImporter.ValidateTemplate");
		builder = builder.withParam("Template", _template);
		builder = builder.withParam("ShowWarningPopup", _showWarningPopup);
		return builder;
	}

	public static boolean validateTemplate(
		IContext context,
		excelimporter.proxies.Template _template,
		boolean _showWarningPopup
	)
	{
		Object result = validateTemplateBuilder(
				_template,
				_showWarningPopup
			)
			.execute(context);
		return (boolean) result;
	}
}
